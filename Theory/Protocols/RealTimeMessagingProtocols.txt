*   Explain Polling in detail. 

>>  Polling is a technique used in client-server communication where the client repeatedly sends HTTP requests to the 
    server at regular intervals to check for updates or new information.

    How Polling Works
        
        (1) Client Sends a Request:

            - At a fixed time interval, the client sends an HTTP request to the server asking for updates or data.

        (2) Server Processes the Request:

            - The server processes the request and responds, regardless of whether new information is available.
            - If there is no new data, the server may respond with an empty result or the same data as before.
        
        (3) Client Waits for the Next Interval:

            - After receiving the response, the client waits for the next scheduled interval and repeats the process.

    Example:
        
        - A weather application that updates the temperature every 10 seconds sends periodic requests to the server, 
          regardless of whether the temperature has changed.

    Advantages:

        (1) Simplicity:

            - Polling is straightforward to implement using standard HTTP requests and responses.
                    
        (2) Compatibility:

            - Works with any server that supports HTTP, making it widely applicable and platform-independent.
        
        (3) Statelessness:

            - Each request is independent, which simplifies the server's design since no persistent connections or state 
              information need to be maintained.
        
    Disadvantages:
        
        (1) High Network Overhead:

            - Polling involves repeated requests, even when there is no new data to retrieve resulting in unnecessary 
              network traffic.
        
        (2) Increased Server Load:

            - The server must process a large number of requests, even if they do not result in meaningful responses. 
        
        (3) Latency:

            - Updates are not instantaneous. The client must wait until the next polling interval to fetch new data, 
              leading to delays in time-sensitive applications.

________________________________________________________________________________________________________________________

*   Explain Long polling and how it mitigates Polling limitations.

>>  Long polling is a technique used in client-server communication to achieve near real-time updates without the 
    inefficiencies of frequent requests (as seen in traditional polling). 
    
    It bridges the gap between simple polling and more advanced techniques like WebSockets, providing a way for the client 
    to receive updates as soon as they are available.

    How Long Polling Works
        
        (1) Client Sends a Request:

            - The client sends an HTTP request to the server, asking for updates.
        
        (2) Server Holds the Request:

            - Instead of responding immediately, the server keeps the connection open until new data becomes available 
              or a timeout occurs.
        
        (3) Server Sends a Response:

            - When new data becomes available the server sends it to the client.
            
            - If no data is available before the timeout, the server responds with an empty or default message.
        
        (4) Client Sends a New Request:

            - Upon receiving the server's response, the client processes the data and immediately sends a new long-polling 
              request.
            
            - This cycle repeats continuously, providing near real-time updates.

    Advantages:

        (1) Reduced Network Traffic:

            - Compared to traditional polling, fewer requests are made when no data is available.
        
        (2) Stateless Communication:

            - Each long-polling request is independent, meaning the server doesn't need to maintain client state between requests.
        
        (3) Near Real-Time:

            - The client gets updates as soon as they are available on the server, minimizing latency.

        (4) Compatibility:

            - Works with standard HTTP protocols, making it widely compatible with existing infrastructure.

    Disadvantages:

        (1) Server Resource Usage:

            - The server holds open connections, which can consume significant resources under heavy client loads.

        (2) Connection Overhead:

            - Each long-polling request involves setting up and tearing down an HTTP connection, which adds some overhead.
            
________________________________________________________________________________________________________________________

*   Explain WebSocket in detail.

>>  WebSocket is a full-duplex communication protocol that operates over a single TCP connection, allowing persistent 
    communication between a client and a server. 
    
    Unlike traditional HTTP, which is request-response based, WebSocket enables both client and server to send and 
    receive messages independently, making it suitable for real-time applications.

    Key Features:

        (1) Full-Duplex Communication:

            - Both client and server can send and receive data simultaneously, unlike HTTP.

        (2) Low Latency:

            - Persistent connection reduces overhead, leading to faster communication compared to polling.

        (3) Lightweight Headers:

            - After the initial handshake, WebSocket frames have minimal overhead, making communication efficient.

        (4) Real-Time Data Exchange:

            - Ideal for applications requiring real-time updates, such as chat apps, online gaming, and live financial 
              data feeds.

        (5) Binary and Text Messages:

            - Supports transmission of both text (UTF-8) and binary data.

        (6) Ping-Pong Frames:

            - Built-in mechanism to keep the connection alive and check if the peer is responsive.

    How WebSocket Works:
        
        (1) Establishing a Connection:

            - A WebSocket connection starts as a standard HTTP request. 
            
            - The client sends an HTTP request to the server with an Upgrade header to indicate the desire to establish 
              a WebSocket connection.
                
            - Example HTTP headers in the request:

                ```
                    GET /chat HTTP/1.1
                    Host: example.com
                    Upgrade: websocket
                    Connection: Upgrade
                    Sec-WebSocket-Key: <randomly-generated-key>
                    Sec-WebSocket-Version: 13
                ```

            - The server responds with an HTTP 101 status code to confirm the protocol switch:

                ```
                    HTTP/1.1 101 Switching Protocols
                    Upgrade: websocket
                    Connection: Upgrade
                    Sec-WebSocket-Accept: <hashed-key>
                ```

        (2) Upgrading to WebSocket:

            - The Sec-WebSocket-Key is hashed by the server using SHA-1 and a magic string (258EAFA5-E914-47DA-95CA-C5AB0DC85B11). 
            
            - The server includes the hashed value in the Sec-WebSocket-Accept response header to verify the handshake.

        (3) Persistent Connection:

            - Once the handshake is complete, the HTTP connection is upgraded to a WebSocket connection.
            
            - Both client and server can now send and receive messages asynchronously.

            - Unlike HTTP where for each request a new connection needs to be created, Websocket has one single persistent 
              connection for each request.

        (4) Data Transmission:

            - Data is transmitted in WebSocket frames. 
            
            - Each frame contains:

                - FIN: Indicates if this is the final frame in a message.
                - Opcode: Specifies the type of frame (text, binary, close, ping, pong).
                - Payload: The actual data being sent.

        (5) Closing the Connection:

            - Either the client or server can close the connection by sending a close frame. 
            
            - The other side acknowledges this with its own close frame.

    Advantages:

        (1) Efficiency:

            - Reduces HTTP overhead by maintaining a single connection for all communication.
            
        (2) Real-Time Communication:

            - Enables instantaneous data exchange, crucial for interactive applications.
            
        (3) Bidirectional Communication:

            - Removes the need for separate request-response cycles, allowing seamless interaction.
            
    Disadvantages:

        (1) Complexity:

            - Requires careful handling of connections, especially for large-scale applications.
        
        (2) Firewall/Proxy Issues:

            - Some firewalls or proxies might block WebSocket traffic, leading to connectivity issues.
        
        (3) Lack of Native Load Balancing:

            - Traditional load balancers might struggle to maintain WebSocket connections since these are persistent.
        
        (4) Stateful Connection:

            - WebSocket requires the server to maintain connection state for each client, increasing memory usage.

________________________________________________________________________________________________________________________