*   Why there is a need for Geospatial Indexes ?

>>  Problem Statement:
        
        You want to find nearby businesses (e.g., restaurants, hotels, etc.) within a specific range from a given location, 
        using latitude and longitude of the locations.

    Solutions without Geospatial Indexes:
        
        (1) Brute-Force Approach:
            
            (a) Explanation:
                
                - For every business in the database, calculate the distance from the given location using the latitude 
                  and longitude of both points.

                - Filter the businesses based on whether the calculated distance is within the desired range.
            
            (b) Drawbacks:
                
                - This approach is inefficient for large datasets, as it requires computing the distance for every point.
                
                - Not scalable for applications with high traffic (e.g., Uber, Zomato), as millions of requests per 
                  second would create significant computational overhead.

            (c) Time Complexity: O(N)

                - N: Total number of businesses.

        (2) Indexing on One Coordinate (Latitude or Longitude):
        
            (a) Explanation:
                
                - Create an index on either the latitude or longitude column.
                
                - Use the index to filter points that are within the desired range for that coordinate.
                
                - This reduces the search space to a smaller subset of points (M) that match the range on one coordinate.
                
                - For the remaining points (M), compute the distance to the given location and filter based on the 
                  desired range.
            
            (b) Drawbacks:
            
                - Filtering based on one coordinate alone may include points that are close in one dimension but far 
                  apart in the other, requiring additional distance calculations.
            
            (c) Time Complexity: O(log(N))+O(M)
            
                - N: Total number of businesses initially.
                - M: Number of businesses remaining after the first filter.
            
        (3) Indexing on Both Coordinates (Latitude and Longitude):
            
            (a) Explanation:
            
                - Create separate indices for both latitude and longitude columns (e.g., B+ Trees).
                
                - First, filter points based on one coordinate using its index, reducing the search space from N to M in 
                  O(log(N)).
            
                - For each of the M points, use the second coordinate’s index to further refine the search in O(M*log(N)).
            
            (b) Drawbacks:
            
                - Although this reduces the search space further, the overall efficiency gain is limited due to multiple 
                  index searches.
            
            (c) Time Complexity: O(log(N))+O(M*log(N))
            
                - N: Total number of businesses initially.
                - M: Number of businesses remaining after filtering by the first coordinate.

    - Geospatial indexing solves the problem by indexing spatial data (latitude-longitude) into structures like qud trees 
      GeoHash indices, allowing efficient retrieval of nearby points within a specified range.
    
________________________________________________________________________________________________________________________

*   What are various types of Geospatial Indexes ?

>>  There are mainly two types of Geospatial Indexes:

        (1) Hash-Based:

            - These indexes divide the geographic area into a grid of cells and assign a unique hash to each cell (e.g., Geohash).
            
            - Efficient for range queries in rectangular or grid-based areas but can introduce inaccuracies at cell 
              boundaries.

            - Examples: Geohash, S2 Geometry.

        (2) Tree-Based:

            - These indexes use hierarchical data structures like R-trees or Quadtrees to partition space recursively.

            - Suitable for complex spatial queries like nearest neighbors or points within irregular shapes.

            - Examples: R-tree, Quadtrees, KD-trees, GiST (used in PostGIS).

________________________________________________________________________________________________________________________

*   Explain Geohash Indexing in detail.

>>  Geohash is a spatial data structure and algorithm that encodes a geographic location into a short string of letters 
    and digits. 
    
    It divides the Earth's surface into a grid of boxes, assigning each box a unique hash (Geohash) based on interleaving 
    the binary representations of latitude and longitude.

    How Geohash Indexing Works:

        (1) Spatial Division:

            - The Earth's surface is recursively divided into grids using latitude [-90°, 90°] and longitude [-180°, 180°] 
              coordinates.
            
            - Each cell of the grid represents a bounding box of a certain area.

                                                                   90°
                    _________________________________________________________________________________________________
                    |           |           |                       |                                               |
                    | 01 01 01  | 01 01 11  |                       |                                               |
                    |___________|___________|        01 11          |                                               |
                    |           |           |                       |                                               |
                    | 01 01 00  | 01 01 10  |                       |                                               |
                    |___________|___________|_______________________|                       11                      |
                    |                       |                       |                                               |
                    |                       |                       |                                               |
                    |         01 00         |        01 10          |                                               |
                    |                       |                       |                                               |
                    |                       |                       |                                               |
              -180° |_______________________|_______________________|_______________________________________________| 180°
                    |                                               |                                               |           
                    |                                               |                                               |
                    |                                               |                                               |
                    |                                               |                                               |
                    |                                               |                                               |
                    |                      00                       |                      10                       |
                    |                                               |                                               |
                    |                                               |                                               |
                    |                                               |                                               |
                    |                                               |                                               |
                    |                                               |                                               |
                    |_______________________________________________|_______________________________________________|
                
                                                                  -90°
        
        (2) Bit Representation:
            
            - The Latitude [-90°, 90°] and Longitude [-180°, 180°] ranges are mapped onto binary by repeatedly halving 
              the range and interleaving Latitude and Longitude binary representation into single binary string.

            - For latitude binary representation:

                - If point lies on the top, append '1'.
                - If point lies on the bottom, append '0'.

            - For longitude binary representation:

                - If point lies on the right, append '1'.
                - If point lies on the left, append '0'.

            - Example : 

                Let's say the point is represented as [Latitude: 48.858844, Longitude: 2.294351]

                (a) Initial Coordinate Ranges:

                    - Latitude: [-90, 90]
                    - Longitude: [-180, 180]

                (b) Binary Encoding through Range Subdivision:
                    
                    - We iteratively divide latitude and longitude ranges, recording whether the given Latitude is in 
                      the upper or lower and the given Longitude is in the left or right.

                    - Iteration-1

                        (i) Latitude:

                            - Range                 : [-90, 90]

                            - Midpoint              : 0
                            
                            - Since 48.858844 > 0, point is in the upper half. So, append '1'.
                            
                            - Binary representation : '1'
                            
                            - New Range             : [0, 90]

                        (ii) Longitude:

                            - Range                 : [-180, 180]
                            
                            - Midpoint              : 0
                            
                            - Since 2.294351 > 0, point is in the right half. So, append '1'.
                            
                            - Binary representation : '1'
                            
                            - New Range             : [0, 180]

                    - Iteration-2
                        
                        (i) Latitude:

                            - Range                 : [0, 90]
                            
                            - Midpoint              : 45
                            
                            - Since 48.858844 > 45, point is in the upper half. So, append '1'.
                            
                            - Binary representation : '11'
                            
                            - New Range             : [45, 90]
                    
                        (ii) Longitude:

                            - Range                 : [0, 180]
                            
                            - Midpoint              : 90
                            
                            - Since 2.294351 < 90, point is in the left half. So, append '0'.
                            
                            - Binary representation : '10'
                            
                            - New Range             : [0, 90]

                    - Continue this process for several iterations

                (c) Interleaving:

                    - The binary representation of latitude and longitude is interleaved, i.e., alternate bits of latitude 
                      and longitude are combined into a single binary string.

                    - Latitude binary representation:       '11001...'
                    
                    - Longitude binary representation:      '10110...'
                    
                    - Interleaved binary representation:    '11 10 01 01 10 ...' 

        (3) Base32 Encoding:

            - The resulting binary string is split into chunks (typically 5 bits at a time) that are then mapped to a 
              Base32 character.

            - Since Base32 has 32 characters, each chunk can be represented by one character.
        
        (4) Precision:

            - The length of the geohash string determines its precision.

            - For nearby cells, the binary representation of their latitude and longitude values will only differ by a few bits. 
            
            - Since the geohash is encoded in Base32, the difference in geohashes for nearby locations will be small i.e., 
              they will share a long prefix.

            - For example, these Base32 encoded strings 'u09tvqe', 'u09tvqd', 'u09tvqf', and 'u09tvqg' are nearby geohashes 
              and will share the same prefix 'u09tvq'.

    SQL Query:

        - To effectively search for geohashes within both small and large regions using Base32-encoded geohashes, you 
          can use a combination of prefix matching and range expansion based on the desired search area. 

        - Let’s assume for the geohash 'u09tvqe' which represents user current location, we will define queries for 
          searching nearby hotels for both a small region (5 km radius) and a larger region (50 km radius).

        (1) Small Region Query:

            ```
                SELECT * FROM locations WHERE geohash LIKE 'u09tvq%' AND distance(user_location, location) <= 5;
            ```

            - geohash LIKE 'u09tvq%' filters all geohashes starting with 'u09tvq' covering small region.
            - distance(user_location, location) <= 5 ensures the points returned are within 5 km.

        (2) Large Region Query:

            ```
                SELECT * FROM locations WHERE geohash LIKE 'u09tv%' AND distance(user_location, location) <= 50;
            ```

            - geohash LIKE 'u09tv%' filters all geohashes starting with 'u09tv' covering large region.
            - distance(user_location, location) <= 50 ensures the points returned are within 50 km.

    Advantages:
        
        (1) Efficient Spatial Queries:

            - Nearby locations often share a common geohash prefix. 
            
            - This makes it efficient for querying neighboring areas, as you can search for geohashes with the same prefix.
            
        (2) Compact Representation:

            - Geohashes are concise strings, reducing storage requirements compared to raw latitude-longitude pairs.
            
            - Being a single string, it can be indexed for efficient search. 
            
  
    Disadvantages:

        (1) Non-Uniform Grid Size:

            - The Earth's curvature causes geohash grid cells to vary in size, especially near the poles, leading to 
              inaccuracies in distance calculations.
            
        (2) Edge Cases:

            - Nearby points across a geohash boundary may have significantly different hashes, complicating queries that 
              involve spatial joins or range searches.
                  
________________________________________________________________________________________________________________________