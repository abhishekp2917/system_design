*   What is Leaderless Replication ?

>>  Leaderless replication is a replication strategy used in distributed systems where there is no designated leader 
    or primary node to coordinate data replication. 

    All replicas are peers, and clients can write or read data from any replica in the system.
    
    Because writes can occur at multiple replicas simultaneously, conflicts may arise. These are resolved using 
    techniques like last-write-wins (LWW), vector clocks, or application-specific logic.

    Leaderless Replication Terms:

        (1) Replication Factor (RF):

            - The system is configured with a replication factor (RF), which defines the number of replicas. 
              For example, if RF=3, the data is stored on three replicas.
        
        (1) Write Quorum (W): 
        
            - The minimum number of replicas that must acknowledge a write for it to be considered successful.
        
        (2) Read Quorum (R): 
        
            - The minimum number of replicas that must be queried during a read to ensure the data is valid.

    How Leaderless Replication Works:

        (1) Writes:

            - A client sends a write request to one or more replicas. 
            - The write is considered successful if it is acknowledged by at least W replicas (write quorum), where W ≤ RF.
            - The replicas that receive the write propagate the data to other replicas asynchronously.

        (2) Reads:

            - A client sends a read request to one or more replicas. 
            - The read is considered successful if it is acknowledged by at least R replicas (read quorum), where R ≤ RF.
            - If inconsistencies are detected (e.g., different replicas return different versions of the data), a process 
              called read repair is triggered to reconcile the differences.

        (3) Conflict Resolution:

            - If multiple replicas have diverging data, conflicts are resolved using one of the following methods:
                
                (a) Last-Write-Wins (LWW): 
                
                    - The write with the latest timestamp is considered authoritative.

                (b) Version Vectors: 
                
                    - Use vector clocks to identify and reconcile divergent histories.

                (c) Application Logic: 
                
                    - Custom conflict resolution logic defined by the application.

    Advantages:

        (1) High Availability:

            - The system can handle writes and reads as long as a sufficient number of replicas are available 
              (W for writes and R for reads).

        (2) Fault Tolerance:

            - Since there is no single leader, the failure of one node does not impact the overall system's functionality.

        (3) Scalability:

            - It is easier to scale out by adding more replicas without requiring reconfiguration of a leader.

        (4) Flexibility in Consistency:

            - Applications can choose different consistency levels (e.g., strong vs. eventual consistency) just by 
              carefully configuring the read quorum (R) and write quorum (W).

    Disadvantages:

        (1) Complex Conflict Resolution:

            - Handling conflicts due to concurrent writes can be challenging and may require custom application logic.

        (2) Higher Latency for Strong Consistency:

            - Achieving strong consistency (R + W > RF) requires more replicas to participate, increasing latency.

        (3) Temporary Inconsistency:

            - Clients may observe stale data if the replicas are not fully synchronized.

________________________________________________________________________________________________________________________

*   How Strong Consistency can be ensured in Leaderless Replication ?

>>  Leaderless replication can ensure strong consistency by carefully configuring the Read quorum (R) and Write quorum (W)
    such that every read always encounters at least one latest write. 
    
    Strong Consistency Rule:

        R+W>RF
        
        Where:
            R = Number of replicas queried during a read.
            W = Number of replicas that must acknowledge a write.
            RF = Replication Factor (total number of replicas storing the data).

    Why R+W>RF?:

        This ensures overlap between the replicas involved in write and read operations. Without overlap, it is possible 
        for a read to miss the latest write.    

    How It Works:

        (1) Write Operation:

            - The system considers a write successful only if at least W replicas acknowledge the write.
            - This means the new data is stored on at least W replicas, even if others are temporarily unreachable.

        (2) Read Operation:
            
            - When a read request is issued, it queries at least R replicas.
            - If R+W>RF, there is guaranteed to be at least one replica in the R replicas queried that holds the latest 
              data written.
    
    Example:

        (1) Configuration:

            - Replication Factor (RF): 3
            - Write Quorum (W): 2
            - Read Quorum (R): 2
        
        (2) Write Operation:

            - The client writes data D1.
            - At least W=2 replicas (e.g., A and B) store the data before the write is acknowledged.
            - The third replica C may temporarily have stale data due to a network delay or failure.

        (3) Read Operation:

            - The client reads the data and queries R=2 replicas (e.g., B and C).
            - Since R+W>RF (2+2=4>3), at least one queried replica (B) will have the latest data.
            - The system identifies the correct data (D1) and can optionally update stale replicas (read repair).

________________________________________________________________________________________________________________________