*   How Multi-Leader Replication model works ?

>>  Multi-leader replication is a type of replication strategy in distributed systems where multiple nodes act as 
    leaders and can handle write requests. 

    Key Characteristics of Multi-Leader Systems:
        
        (1) Leader Nodes: 
        
            - Multiple leaders can exist and each leader node can accept write operations. 
            - They can handle writes for different data partitions or the same data with conflict resolution mechanisms.

        (2) Follower Nodes: 
        
            - Even though the system is termed "multi-leader," the concept of followers still applies. 
            - If a node is not the leader for a specific piece of data, it will replicate the changes made by the leader node. 

    Example Scenario:
        
        - Node A, Node B, and Node C are part of a multi-leader system.
        
        - Node A acts as the leader for user data and can accept writes related to user data. It will then replicate 
          these changes to Node B and Node C (which act as followers for user data).

        - Similarly, Node B might act as a leader for product data, and Node C could be the leader for order data.
        
        - If Node A fails, Node B or Node C can take over its responsibilities (depending on how the replication and 
          conflict resolution mechanisms are designed).
          
    Benefits :

        - Fault tolerant in terms of write request due to multiple leaders.
        - Higher write throughput.

    Drawbacks:

        - Write conflicts between multiple leaders.  
________________________________________________________________________________________________________________________

*   What are various conflict resolution techniques ?

>>  (1) Last Write Wins (LWW):

        - The system retains the most recent update based on a timestamp. 
        - When conflicts arise, the update with the latest timestamp overwrites others.

        Advantages: 
            
            - Simple and easy to implement.

        Disadvantages: 
        
            - Can result in data loss if older, important updates are overwritten by newer but less significant ones.
            - System clocks are unreliable when dealing with timestamp.

    (2) Application-Level Conflict Resolution:

        - The application logic explicitly defines how conflicts are resolved based on domain-specific rules.

        Advantages: 
        
            - Customizable to business needs and allows complex conflict resolution strategies.

        Disadvantages: 
        
            - Adds complexity and requires developers to implement resolution logic.

    (3) Database-Level Conflict Resolution (Vector Clock):
        
        - Uses vector clock to track the order of updates.
        - Conflicting updates are merged or rejected based on vector clock comparisons.

        Advantages: 
        
            - Allows precise tracking of causality between updates.

        Disadvantages: 
        
            - Can become complex with many nodes.

________________________________________________________________________________________________________________________

*   Why system clocks are unreliable when ensuring event order in distributed systems ?

>>  Each node in a distributed system maintains its own system clock, which can diverge over time.

    Clocks on different nodes might report slightly different times for the same event. This inconsistency makes it 
    hard to determine the correct order of events across nodes.

    Following are the reasons for inconsistency in system clocks:

        (1) Imperfect Clock Synchronization:

            Protocols like NTP (Network Time Protocol) or PTP (Precision Time Protocol) attempt to synchronize clocks 
            across systems at regular interval. 

            But since synchronization requires network call which can vary from system to system, leading to inaccurate 
            synchronization.

        (2) Clock Drift:

            Even if clocks are initially synchronized, they can diverge over time due to variations in internal quartz 
            clock frequencies.

________________________________________________________________________________________________________________________

*   What is a Vector Clock and how it detects concurrent writes ?

>>  A Vector Clock is a mechanism to detect concurrent events in a distributed system.

    Two events are considered concurrent if each node has no knowledge of the other node’s event when it happened.

    Vector Clocks maintain an array of counters of size N (N = number of nodes), one for each node in the system to 
    represent count of events that took place on each node.
    
    Comparison Rules in Vector Clocks:

        To determine the causal relationship between two events, compare their vectors:

            (a) Happened-Before Relationship (->):

                Event 𝐸1 happens before E2 if 𝑉(𝐸1)[i]≤𝑉(𝐸2)[i] for all i, and at least one V(E1)[i]<V(E2)[i].

            (b) Concurrent Events:

                Events E1 and E2 are concurrent (E1∣∣E2) if at least one V(E1)[i]<V(E2)[i] and one V(E1)[i]>V(E2)[i].

    How Vector Clock works:

        (1) Initial State:

            Node A: [0, 0, 0]
            Node B: [0, 0, 0]
            Node C: [0, 0, 0]

            Intially all the node has zero events (e.g., writes), representing all the nodes are in sync.

        (2) Write request at A:

            Node A increments its own clock.

            Node A: [1, 0, 0]
            Node B: [0, 0, 0]
            Node C: [0, 0, 0]

        (3) Write request at B:

            Node B increments its own clock.

            Node A: [1, 0, 0]
            Node B: [0, 1, 0]
            Node C: [0, 0, 0]

        (3) A sends message to B for synchronization:

            For the events to be concurrent, there must be at least one index where A[i] > B[i] and another where 
            B[i] > A[i]. Here, A[0] > B[0] and B[1] > A[1], so the events are concurrent.

            Therefore, Node B will merge the changes done on Node A and update it's vector. 

            Before : 

                Node A: [1, 0, 0]
                Node B: [0, 1, 0]
                Node C: [0, 0, 0]

            After :

                Node A: [1, 0, 0]
                Node B: [1, 1, 0]
                Node C: [0, 0, 0]

        (4) B sends message to A and C for synchronization:

            When Node B sends its vector clock to Node A and Node C, 

                - Node A sees that B[1] > A[1], meaning B's event happens after A's.
                - Node C sees B[0] > C[0] and B[1] > C[1], meaning B's event happens after C's. 

            Therefore, Node A and Node C will update their clocks and synchronize with Node B's event.

            Before : 

                Node A: [1, 0, 0]
                Node B: [1, 1, 0]
                Node C: [0, 0, 0]

            After :
            
                Node A: [1, 1, 0]
                Node B: [1, 1, 0]
                Node C: [1, 1, 0]


________________________________________________________________________________________________________________________
