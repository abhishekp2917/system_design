*   What is Load Balancing ?

>>  Load balancing is the process of distributing incoming network traffic across multiple servers or resources to 
    ensure no single server is overwhelmed. 
    
    It enhances the performance, availability, and reliability of applications by spreading the workload evenly.

    How Load Balancing Works:
        
        (1) Client Request:
            
            - Users make a request (e.g., to a website or API).
        
        (2) Load Balancer:
            
            - The load balancer receives the request.
        
        (3) Server Assignment:
            
            - The load balancer decides which backend server or resource to forward the request to based on the chosen 
              balancing algorithm.

        (4) Response Delivery:
            
            - The selected server processes the request and sends the response back to the client (often routed through 
              the load balancer).

    Benefits:
        
        (1) High Availability:
            
            - Ensures application uptime even if one or more servers fail.
        
        (2) Scalability:
            
            - Distributes traffic efficiently as servers are added or removed.

        (3) Improved Performance:
            
            - Reduces latency and optimizes resource usage.

        (4) Fault Tolerance:
            
            - Automatically reroutes traffic to healthy servers during outages.

    Drawbacks:

        (1) Complexity:
            
            - Adds architectural complexity to the system.
        
        (2) Latency:
            
            - Introduces an additional hop, which may impact ultra-low-latency systems.

        (3) Single Point of Failure:
            
            - The load balancer itself can become a bottleneck if not properly set up (e.g., without redundancy).
        
        (4) Maintenance:
            
            - Requires monitoring and updating to ensure optimal performance.

________________________________________________________________________________________________________________________

*   What are common load balancing methods ?

>>  (1) Round Robin:

        - Distributes requests sequentially among servers.
        - Pros: Simple implementation.
        - Cons: Doesn’t account for server load or performance differences.

    (2) Least Connections:

        - Routes requests to the server with the fewest active connections.
        - Pros: Efficient for dynamic traffic.
        - Cons: May not consider server processing capacity.
    
    (3) Least Response Time:

        - Sends requests to the server with the fastest response time.
        - Pros: Good for real-time systems.
        - Cons: Requires continuous health monitoring.

    (4) Weighted Load Balancing:

        - Assigns a weight to each server, routing more requests to higher-capacity servers.
        - Pros: Handles uneven server capabilities.
        - Cons: Requires manual configuration and updates.

    (5) Consistent Hashing:

        - Servers are assigned positions in the hash space and requests are hashed and routed to the nearest server clockwise.
        - Pros: Adding or removing servers affects only a small portion of keys, reducing cache invalidation.
        - Cons: Performance depends on the quality of the hash function used.

________________________________________________________________________________________________________________________

*   How to prevent single point of failure of load balancer ?

>>  (1) Multiple load balancer (Active-Active) Configuration:

        - Multiple load balancers operate simultaneously, sharing the traffic load.
        - If one fails, others continue handling requests seamlessly.
        - Benefit: Maximizes performance and redundancy.
        - Example: DNS-based load balancing distributes traffic among multiple load balancers.

    (2) Multiple load balancer (Active-Passive) Configuration:

        - A primary load balancer handles traffic, while a backup remains on standby.
        - The backup takes over if the primary fails (using health checks).
        - Benefit: Simpler than active-active, with reduced resource usage.

________________________________________________________________________________________________________________________

*   How DNS (Domain Name System) based load balancing works ?

>>  DNS-based load balancing leverages the DNS to distribute network traffic across multiple servers (application 
    servers or load balancers). 
    
    How DNS-Based Load Balancing Works:
            
        (1) User Request:

            - A user types a domain name (e.g., example.com) into their browser.
            - The browser sends a DNS request to resolve the domain name to an IP address.

        (2) DNS Server Query:

            - The DNS resolver (usually provided by the ISP or 3rd party such as Google DNS) queries its local DNS server.
            - The DNS server checks its cache for the requested domain. 
            - If it doesn't have the information, it sends a query to a root DNS server.
    
        (3) Root DNS Server:

            - The root DNS server responds with the authoritative name server for the domain (e.g., ns1.example.com).
    
        (4) Authoritative DNS Server:

            - The user’s local DNS server queries the authoritative DNS server (provided by the domain owner or hosting 
              provider) for the requested domain.
            - The authoritative DNS server responds with a list of IP addresses associated with the domain.
            - Instead of just one IP address, it may return multiple IPs (e.g., 192.168.1.1, 192.168.1.2, 192.168.1.3).
            - Each IP address corresponds to a different server that hosts the service.

        (5) Load Balancing Decision:

            - The DNS resolver then chooses an IP address from the list according to the load balancing algorithm 
              specified by the DNS records (e.g., Round Robin, Weighted Round Robin, Least Connections, etc.).
        
        (6) User Access:

            - The user's request is then sent to the selected IP address (server).
            - The web server processes the request, and responses are sent back to the user.

    Advantages:

        (1) Scalability:
            
            - Easily scale services by adding or removing servers from DNS records without any change to the clients.

        (2) Cost-Effective:
            
            - No need for additional hardware load balancers, as DNS servers perform the job.

        (3) Fault Tolerance:
            
            - In case of server failure, traffic can be rerouted to other servers with minimal impact on service 
              availability.

        (4) Performance Optimization:
            
            - Distributes load based on different algorithms (e.g., Round Robin, Least Connections), reducing 
              latency and improving response times.

    Disadvantages:

        (1) DNS Limitations:        
            
            - DNS-based load balancing does not account for dynamic server conditions (e.g., CPU usage, memory).

        (2) Caching Issues:
            
            - DNS resolvers cache DNS records for a specific period (TTL - Time To Live), which can cause users 
              to connect to a server that is down or overloaded for some time.

        (3) Not Suitable for High-Speed Applications:
            
            - DNS lookups and responses add overhead, making it less suitable for real-time applications like 
              VoIP or online gaming.

        (4) Limited Flexibility:
            
            - It doesn’t provide fine-grained control over routing decisions compared to application-level load balancers.


    Example:


        A web hosting service manages multiple web servers/load balancers to handle client requests for websites 
        hosted on their platform.
        
        They use DNS-based load balancing to distribute web traffic among these servers.

        Steps:

            (1) DNS Configuration:

                - The authoritative DNS server for example.com contains multiple A records pointing to different servers.

                    example.com. IN A 192.168.1.1
                    example.com. IN A 192.168.1.2
                    example.com. IN A 192.168.1.3

            (2) Load Balancing Decision:

                - The DNS resolver receives the list of IP addresses and uses the Round Robin algorithm to distribute
                  requests.

                    1st request → 192.168.1.1
                    2nd request → 192.168.1.2
                    3rd request → 192.168.1.3
                    4th request → 192.168.1.1
            
            (3) Handling Failures:

                - If a server (e.g., 192.168.1.2) goes offline, the authoritative DNS server updates the A records.
                - New requests will no longer be directed to the failed server, thus maintaining availability and 
                  performance.


                    example.com. IN A 192.168.1.1
                    example.com. IN A 192.168.1.3

            
            (4) Performance Monitoring:

                - The DNS administrator may adjust the weights in Weighted Round Robin if they notice certain servers 
                  handle more traffic and require more resources.

________________________________________________________________________________________________________________________

